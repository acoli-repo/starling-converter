package de.unifrankfurt.informatik.acoli.starling.parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import de.unifrankfurt.informatik.acoli.starling.jaxb.turkic.Field;
import de.unifrankfurt.informatik.acoli.starling.jaxb.turkic.Root;
import de.unifrankfurt.informatik.acoli.starling.util.Utils;

/**
 * Implementation of an XML Parser for Starling xml exports made with the star4win
 * windows application available from<p> 
 * <a href="http://starling.rinet.ru/downl.php?lan=en#soft">http://starling.rinet.ru/downl.php?lan=en#soft</a>.
 * <p>
 * Get XML elements from java classes generated by the xjc tool included
 * in the java jdk/bin folder. The xsd schema needed by xjc can be generated e.g. with the trang tool <p>
 * see <a href="http://www.thaiopensource.com/relaxng/trang.html">http://www.thaiopensource.com/relaxng/trang.html</a>
 * <p>
 * Example for xml-schema and java class generation.
 * <p><p>
 * # XSD schema generation from xml (using the trang tool)<p>
 * java -jar trang.jar filename.xml filename.xsd
 * <p><p>
 * # JAXB class generation (-p package path, -d target directory)<p>
 * xjc turcet.xsd -p de.unifrankfurt.informatik.starling.jaxb.turcet -d path where java classes are written
 * 
 * @author frank
 *
 */
public class StarlingJAXBReader implements StarlingXMLParserI{

	// Input path
	String inputPath = "";
	
	// Root class of xml document
	Root root;
	
	// Linked hashmap for record (elementname, value) pairs
	LinkedHashMap <String,String> lhm = new LinkedHashMap <String,String>();
	
	// Proto language
	public String protoLanguage="";
	
	// Fields of a jaxb record
	static List <Field> fields;
	
	/**
	 * Constructor for JAXB reader (which uses default jaxb classes)
	 * @param xmlFilePath Path to Starling XML dictionary
	 */
	public StarlingJAXBReader(String xmlFilePath) {
		
		this("de.unifrankfurt.informatik.acoli.starling.jaxb.turkic",xmlFilePath);
	}

	
	/**
	 * Constructor for JAXB reader
	 * @param classesFolderPath Path to already generated java classes
	 * @param xmlFilePath Path to Starling XML dictionary
	 */
	public StarlingJAXBReader (String classesFolderPath, String xmlFilePath) {
			
	try {
			JAXBContext jaxbContext = JAXBContext.newInstance (classesFolderPath);
			Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
			
			System.out.println(xmlFilePath);
			// Read xml file into java classes
			
			Reader is = null;
			try {
				is = new InputStreamReader(getClass().getResourceAsStream(xmlFilePath));
			} catch (Exception e) {
				try {
					is = new InputStreamReader(new FileInputStream(xmlFilePath));
				} catch (FileNotFoundException e1) {
					e1.printStackTrace();
				}
			}
			
			Object o = unmarshaller.unmarshal(is);
			//Object o = unmarshaller.unmarshal(new File(xmlFilePath));
			
			
			// Root class := root element of xml document
			root = (Root) o;
			
		} catch (JAXBException e) {
			e.printStackTrace();
		}
		}
	


	@Override
	public Map<String, String> getXMLRecord(int recordNr) {
		
		// clear hashmap
		lhm.clear();
		
		// Get fields of record with recordNr
		fields = root.getData().getRecord().get(recordNr-1).getField();
		
		// Add fieldname and field value to hashmap
		for (Field f : fields) {
			lhm.put(f.getName().toString(), f.getContent().get(0).toString());
		}
		
		// return hashmap with pairs of (element name, element value)
		return lhm;
	}

	
	@Override
	public int getXMLRecordCount() {
		return root.getData().getRecord().size();
	}

	
	@Override
	public String getXMLDescription() {
		return root.getDescription();
	}

	
	@Override
	public ArrayList<String> getXMLElementTypes() {
	ArrayList <String> tagSet = new ArrayList <String> ();
		 
		 for (Field field : root.getFields().getField()) {
			 if (field.getName().equals("PROTO")) {
				 
				 JAXBElement <String> elem = (JAXBElement <String>) field.getContent().get(3);

				 protoLanguage = elem.getValue();
				 if (protoLanguage.contains(":")) {
					 protoLanguage = protoLanguage.split("\\\\")[1].split(":")[1];
				 }
					 
				 Utils.print ("*** Starling : "+protoLanguage+" ***");
				 Utils.print("");
			 }
			 tagSet.add(field.getName());
		 }

		 return tagSet;
	}

	
	@Override
	public String getProtoLanguage() {
		return protoLanguage;
	}


	@Override
	public String getInputPath() {
		return inputPath;
	}

}
